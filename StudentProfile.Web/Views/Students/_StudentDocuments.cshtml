@using System.Web.UI.WebControls
@using DevExpress.Export
@using System.Drawing
@{ 
     var DataIsDone = (bool)Session["DataIsDone"];
}
@Html.DevExpress().GridView(settings =>
{
    settings.Name = "StudentDocuments";
    settings.KeyFieldName = "ID";
    settings.Styles.Table.CssClass = "dx-table-ds";
    settings.SettingsDataSecurity.AllowReadUnlistedFieldsFromClientApi = DefaultBoolean.True;
    settings.Width = Unit.Percentage(100);
    settings.CallbackRouteValues = new { Action = "_StudentDocuments", Controller = "Students",id = (int?)ViewBag.StudentID  };
    settings.SettingsExport.EnableClientSideExportAPI = true;
    settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
    settings.Toolbars.Add(t =>
    {
        t.EnableAdaptivity = true;

        t.Items.Add(GridViewToolbarCommand.ExportToPdf);
        t.Items.Add(GridViewToolbarCommand.ExportToXls);
        t.Items.Add(GridViewToolbarCommand.ExportToXlsx);
        t.Items.Add(GridViewToolbarCommand.ExportToDocx);
        t.Items.Add(GridViewToolbarCommand.ExportToRtf);
        t.Items.Add(GridViewToolbarCommand.ExportToCsv);
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "الوثيقة";
        column.FieldName = "Document";
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "رقم الوثيقة";
        column.FieldName = "IdentityNumber";
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "تاريخ الانتهاء";
        column.FieldName = "ExpiryDate";
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "تاريخ الاضافة";
        column.FieldName = "InsertDate";
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "تاريخ الاعتماد";
        column.FieldName = "ApprovedDate";
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "الحالة";
        column.FieldName = "isAproved";
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "ملاحظات";
        column.FieldName = "RefusedNotes";
    });
    settings.Columns.Add(column =>
    {
        column.Caption = "تعديل";
        column.SetDataItemTemplateContent(c =>
        {
            bool IsActive = bool.Parse(DataBinder.Eval(c.DataItem, "IsActive").ToString());
            bool? IsTransfer = false;
            if(DataBinder.Eval(c.DataItem, "IsTransfer")!=null)
            {
                IsTransfer = bool.Parse(DataBinder.Eval(c.DataItem, "IsTransfer").ToString());
            }
            bool? IsExpired = false;
            if(DataBinder.Eval(c.DataItem, "IsExpired")!=null)
            {
                IsExpired = bool.Parse(DataBinder.Eval(c.DataItem, "IsExpired").ToString());
            }

            if(IsTransfer!=true && IsExpired != true)
            {
                ViewContext.Writer.Write("<input type='button' class='btn btn-success btn-sm' value='تعديل' onclick= 'EditDocumentByStudent(" + c.KeyValue + ")'/>");
            }

        });
    });


    settings.Columns.Add(column =>
    {
        column.Caption = "حذف";
        column.SetDataItemTemplateContent(c =>
        {
            bool IsActive = bool.Parse(DataBinder.Eval(c.DataItem, "IsActive").ToString());
            bool? IsTransfer = false;
            if(DataBinder.Eval(c.DataItem, "IsTransfer")!=null)
            {
                IsTransfer = bool.Parse(DataBinder.Eval(c.DataItem, "IsTransfer").ToString());
            }
            bool? IsExpired = false;
            if(DataBinder.Eval(c.DataItem, "IsExpired")!=null)
            {
                IsExpired = bool.Parse(DataBinder.Eval(c.DataItem, "IsExpired").ToString());
            }
            string isRefused =DataBinder.Eval(c.DataItem, "RefusedNotes")!=null? DataBinder.Eval(c.DataItem, "RefusedNotes").ToString():"";
            if(( IsTransfer!=true) ||(IsExpired==true) || (String.IsNullOrEmpty(isRefused) ==false))
            {
                ViewContext.Writer.Write("<input type='button' class='btn btn-danger btn-sm' value='حذف' onclick= 'DeleteDocumentByStudent(" + c.KeyValue + ")'/>");

            }
        });
    });

    settings.SettingsBehavior.AllowSelectByRowClick = true;
    settings.CommandColumn.Visible = true;
    settings.CommandColumn.Width = Unit.Percentage(10);
    settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.AllPages;
    settings.SettingsPager.PageSize = 20;
    settings.SettingsLoadingPanel.Mode = GridViewLoadingPanelMode.Disabled;
    settings.EnableCallbackAnimation = false;
    settings.CommandColumn.ShowSelectCheckbox = true;
    settings.ClientSideEvents.SelectionChanged = "SelectionChanged";
    settings.CommandButtonInitialize = (s, e) => {
        MVCxGridView Grid = s as MVCxGridView;
        if (e.ButtonType == ColumnCommandButtonType.SelectCheckbox) {

            var ApprovedDateValue = Grid.GetRowValues(e.VisibleIndex, "ApprovedDate");
            if (ApprovedDateValue != null) { e.Visible = false; }
            var RefusedNotesValue = Grid.GetRowValues(e.VisibleIndex, "RefusedNotes");
            if (RefusedNotesValue != null) { e.Visible = false; }
            var IsTransferValue = Grid.GetRowValues(e.VisibleIndex, "IsTransfer");
            if (IsTransferValue != null) { e.Visible = false; }
            var IsIsExpiredValue = Grid.GetRowValues(e.VisibleIndex, "IsExpired");
            if (IsIsExpiredValue != null)
            {
                if ((bool)IsIsExpiredValue == true)
                {
                    e.Visible = false;
                }
            }
        }
    };


}).Bind(Model).GetHtml()
